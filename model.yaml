name: taxi assignment
objective: min


domains:

  assignment:
    values: [1 .. 3]
    type: non_semantic


variables:
  - name: task1
    domain: assignment
    start_x: 1
    start_y: 1
    end_x: 2
    end_y: 2
    
  - name: task2
    domain: assignment
    start_x: 2
    start_y: 2
    end_x: 3
    end_y: 3

    
  - name: task3
    domain: assignment
    start_x: 3
    start_y: 3
    end_x: 4
    end_y: 4
    
  - name: task4
    domain: assignment
    start_x: 4
    start_y: 4
    end_x: 5
    end_y: 5
    
constraints:
  
  task1_length:
    type: intention
    function: |
      if task1 == 1:
          return sqrt(( task1.start_x - a1.pos_x)**2 + (task1.start_y - a1.pos_y)**2) + sqrt((task1.end_x - task1.start_x)**2 + (task1.end_y - task1.start_y)**2)
      elif task1 == 2:
          return sqrt(( task1.start_x - a2.pos_x)**2 + (task1.start_y - a2.pos_y)**2) + sqrt((task1.end_x - task1.start_x)**2 + (task1.end_y - task1.start_y)**2)
      else:
          return sqrt(( task1.start_x - a3.pos_x)**2 + (task1.start_y - a3.pos_y)**2) + sqrt((task1.end_x - task1.start_x)**2 + (task1.end_y - task1.start_y)**2)


  task2_length:
    type: intention
    function: |
      if task2 == 1:
          return sqrt(( task2.start_x - a1.pos_x)**2 + (task2.start_y - a1.pos_y)**2) + sqrt((task2.end_x - task2.start_x)**2 + (task2.end_y - task2.start_y)**2)
      elif task2 == 2:
          return sqrt(( task2.start_x - a2.pos_x)**2 + (task2.start_y - a2.pos_y)**2) + sqrt((task2.end_x - task2.start_x)**2 + (task2.end_y - task2.start_y)**2)
      else:
          return sqrt(( task2.start_x - a3.pos_x)**2 + (task2.start_y - a3.pos_y)**2) + sqrt((task2.end_x - task2.start_x)**2 + (task2.end_y - task2.start_y)**2)

  
  task3_length:
    type: intention
    function: |
      if task3 == 1:
          return sqrt(( task3.start_x - a1.pos_x)**2 + (task3.start_y - a1.pos_y)**2) + sqrt((task3.end_x - task3.start_x)**2 + (task3.end_y - task3.start_y)**2)
      elif task3 == 2:
          return sqrt(( task3.start_x - a2.pos_x)**2 + (task3.start_y - a2.pos_y)**2) + sqrt((task3.end_x - task3.start_x)**2 + (task3.end_y - task3.start_y)**2)
      else:
          return sqrt(( task3.start_x - a3.pos_x)**2 + (task3.start_y - a3.pos_y)**2) + sqrt((task3.end_x - task3.start_x)**2 + (task3.end_y - task3.start_y)**2)
      
  task4_length:
    type: intention
    function: |
      if task4 == 1:
          return sqrt(( task4.start_x - a1.pos_x)**2 + (task4.start_y - a1.pos_y)**2) + sqrt((task4.end_x - task4.start_x)**2 + (task4.end_y - task4.start_y)**2)
      elif task4 == 2:
          return sqrt(( task4.start_x - a2.pos_x)**2 + (task4.start_y - a2.pos_y)**2) + sqrt((task4.end_x - task4.start_x)**2 + (task4.end_y - task4.start_y)**2)
      else:
          return sqrt(( task4.start_x - a3.pos_x)**2 + (task4.start_y - a3.pos_y)**2) + sqrt((task4.end_x - task4.start_x)**2 + (task4.end_y - task4.start_y)**2)
     


agents:
  a1:
    pos_x: 1
    pos_y: 1
  
  a2:
    pos_x: 2
    pos_y: 2
  
  a3:
    pos_x: 3
    pos_y: 3


